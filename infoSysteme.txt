Function Get-WindowsArt()
{
    [string[]] $ArtArray  =
            " ....:::: ",
            " ....:::::::::::: ",
            " ....:::: :::::::::::::::: ",
            "....:::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            "................ ................ ",
            ":::::::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            ":::::::::::::::: :::::::::::::::: ",
            "'''':::::::::::: :::::::::::::::: ",
            " '''':::: :::::::::::::::: ",
            " '''':::::::::::: ",
            " '''':::: ",
            " ",
            " ",
            " ";
    
    return $ArtArray;
}


#Get-ComputerInfo;
function Get-Infosys {

[CmdletBinding()]


#Prompts for Computer Name
param(
    [parameter()]$Computer
)


#Variables
$SystemEnclosure = Get-CimInstance win32_systemenclosure -computername $Computer
$OS = Get-CimInstance Win32_OperatingSystem -Computername $Computer

#Creating Hash table from variables
$PCInfo = @{
    Fabriquant     = $SystemEnclosure.Manufacturer
    NomduPC        = $OS.CSName
    OS             = $OS.Caption
    Architecture   = $OS.OSArchitecture
    AssetTag       = $systemenclosure.serialnumber;
    VersionSysteme = $OS.Version
    dateInstall    = $OS.InstallDate
    DernierBoot    = $Os.LastBootUpTime
}
#Display Hash Table
$PCInfo.getenumerator() | Sort-Object -Property name | Format-Table -AutoSize;
Start-Sleep -Seconds 2;
#Writing to Host
Write-Host "Computer Bios Info" -ForegroundColor Cyan;
Write-Output "Computer Bios Info";

Get-WmiObject -Class Win32_BIOS | Select-Object SMBIOSBIOSVersion,Manufacturer,Name,SerialNumber,Version;
Start-Sleep -Seconds 2;
#Writing to Host
Write-Host "Computer GPU Info" -ForegroundColor Cyan;
Write-Output "Computer GPU Info";

Get-CimInstance -ClassName Win32_VideoController | Select-Object Caption ,PNPDeviceID, DriverDate, DriverVersion, VideoModeDescription;
Start-Sleep -Seconds 2;
#Writing to Host
Write-Host "Computer Display Info" -ForegroundColor Cyan;
Write-Output "Computer Display Info";

wmic desktopmonitor get Caption,MonitorType,MonitorManufacturer,Name;
Start-Sleep -Seconds 2;
#Writing to Host
Write-Host "Computer Disk Info" -ForegroundColor Cyan;
Write-Output "Computer Disk Info";

#Display Drives
Get-CimInstance win32_logicaldisk -Filter "drivetype=3" -computer $computer |
Format-Table -Property DeviceID, Volumename, `
@{Name = "SizeGB"; Expression = { [math]::Round($_.Size / 1GB) } }, `
@{Name = "FreeGB"; Expression = { [math]::Round($_.Freespace / 1GB, 2) } }, `
@{Name = "PercentFree"; Expression = { [math]::Round(($_.Freespace / $_.size) * 100, 2) } } 


#Display Drives
Get-CimInstance win32_logicaldisk -Filter "drivetype=3" -computer $computer |
Format-Table -Property DeviceID, Volumename, `
@{Name = "SizeGB"; Expression = { [math]::Round($_.Size / 1GB) } }, `
@{Name = "FreeGB"; Expression = { [math]::Round($_.Freespace / 1GB, 2) } }, `
@{Name = "PercentFree"; Expression = { [math]::Round(($_.Freespace / $_.size) * 100, 2) } } 

#Writing to Host
Write-Host "Network Information" -Foregroundcolor Cyan

Get-CimInstance win32_networkadapterconfiguration -computer $computer | Where-Object { $_.IPAddress -ne $null } |
Select-Object IPAddress, DefaultIPGateway, DNSServerSearchOrder, IPSubnet, MACAddress, Caption, DHCPEnabled, DHCPServer, DNSDomainSuffixSearchOrder |
Format-List

}
&{Get-WindowsArt ; Get-Infosys}
